import random
from django.core.management.base import BaseCommand
from django.db import transaction
from news.models import Comment, User, NewsArticle

class Command(BaseCommand):
    help = 'Seed comments into the database'

    def handle(self, *args, **options):
        # Danh s√°ch c√°c m·∫´u comment ƒë∆°n gi·∫£n
        comment_templates = [
            "B√†i vi·∫øt r·∫•t hay! C·∫£m ∆°n t√°c gi·∫£.",
            "T√¥i ƒë·ªìng √Ω v·ªõi quan ƒëi·ªÉm n√†y.",
            "Th√¥ng tin r·∫•t h·ªØu √≠ch.",
            "C√≥ ai c√≥ √Ω ki·∫øn kh√°c kh√¥ng?",
            "Tin t·ª©c n√†y th·∫≠t b·∫•t ng·ªù.",
            "T√¥i nghƒ© c·∫ßn xem x√©t th√™m v·ªÅ {topic}.",
            "C·∫£m ∆°n {user} ƒë√£ chia s·∫ª.",
            "Ch·ªß ƒë·ªÅ n√†y ƒëang r·∫•t n√≥ng.",
            "Tuy·ªát v·ªùi!",
            "B√†i ph√¢n t√≠ch s√¢u s·∫Øc.",
        ]
        topics = ["v·∫•n ƒë·ªÅ n√†y", "tin t·ª©c n√†y", "ch·ªß ƒë·ªÅ n√†y", "ƒëi·ªÉm n√†y"]

        try:
            with transaction.atomic():
                self.stdout.write("üóëÔ∏è  ƒêang x√≥a t·∫•t c·∫£ Comment c≈©...")
                Comment.objects.all().delete()

                users = list(User.objects.all()[:10])
                articles = list(NewsArticle.objects.all()[:20])

                if not users:
                    self.stdout.write(self.style.WARNING("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y User n√†o. B·ªè qua seed comments."))
                    return
                
                if not articles:
                    self.stdout.write(self.style.WARNING("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y NewsArticle n√†o. B·ªè qua seed comments."))
                    return

                self.stdout.write(self.style.NOTICE(f"‚è≥ Seeding comments cho {len(articles)} b√†i vi·∫øt v√† {len(users)} ng∆∞·ªùi d√πng..."))
                
                comments_to_create = []
                num_comments = 50

                for i in range(num_comments):
                    user = random.choice(users)
                    article = random.choice(articles)
                    
                    # Ch·ªçn m·ªôt m·∫´u ng·∫´u nhi√™n v√† ƒëi·ªÅn th√¥ng tin (n·∫øu c√≥)
                    template = random.choice(comment_templates)
                    content = template.format(topic=random.choice(topics), user=user.username)
                    
                    comments_to_create.append(
                        Comment(
                            user_id=user.id,
                            article_id=article.id,
                            content=content
                        )
                    )
                    if (i + 1) % 10 == 0:
                         self.stdout.write(f"   ‚ûï ƒê√£ chu·∫©n b·ªã {i + 1}/{num_comments} comments...")

                Comment.objects.bulk_create(comments_to_create)
                self.stdout.write(self.style.SUCCESS(f"‚úî ƒê√£ t·∫°o th√†nh c√¥ng {len(comments_to_create)} comments."))

        except Exception as e:
            self.stderr.write(self.style.ERROR(f"‚ùå L·ªói khi seed comments: {str(e)}")) 